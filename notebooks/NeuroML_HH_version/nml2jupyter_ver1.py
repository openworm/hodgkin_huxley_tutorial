import pylab as plt
import numpy as np
import os
import re

#python helper class for updating NeuroML files and running it from Jupyter Notebook
class nml2jupyter():
    
    def __init__(self, path2source, fname_cellNML, fname_netNML, fname_LEMS, fname_NML_output):
        
        self.path2source      = path2source
        self.fname_cellNML    = fname_cellNML
        self.fname_netNML     = fname_netNML
        self.fname_LEMS       = fname_LEMS
        self.fname_NML_output = fname_NML_output
        
    #function to update existing NeuroML file based on widget inputs
    def writeNMLinputFile(self,C_m, g_Na, g_K, g_L, E_Na, E_K, E_L, t_0, t_n, delta_t, I_inj_max, I_inj_width, I_inj_trans):
        
        """
        RegEx used for search and replace
        
        [\s]   - handling blankspace around numbers
        (  )   - captruing group (only for group numbering)
        (?:)   - non-captruing group (only for group numbering)
        ([-+]?(?:\d*[.])?\d+) - capturing float and integers (problem with no number after period e.g. 25. )
        
        """
        #update CELL NML-----------------------------------------------------------------#
        filename=os.path.join(self.path2source, self.fname_cellNML)
        tempFile=open(filename + ".temp","w")   #temporary file
        
        pattern1= r'(specificCapacitance[\s]+value[\s]*=[\s]*"[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*uF_per_cm2[\s]*")' #handles white spaces everywhere
        pattern2= r'(channelDensity id="naChans" ionChannel="naChan" condDensity="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*mS_per_cm2" erev="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*mV" ion="na")'
        pattern3= r'(channelDensity id="kChans" ionChannel="kChan" condDensity="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*mS_per_cm2" erev="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*mV" ion="k")'
        pattern4= r'(channelDensity id="leak" ionChannel="passiveChan" condDensity="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*mS_per_cm2" erev="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*mV" ion="non_specific")'
        with open(filename) as file:
            lines = file.readlines()
            for line in lines:
                line=re.sub(pattern1,r'\g<1>%s\g<3>' %C_m,line)
                line=re.sub(pattern2,r'\g<1>%s\g<3>%s\g<5>' %(g_Na,E_Na),line)
                line=re.sub(pattern3,r'\g<1>%s\g<3>%s\g<5>' %(g_K,E_K),line)
                line=re.sub(pattern4,r'\g<1>%s\g<3>%s\g<5>' %(g_L,E_L),line)
                tempFile.write(line)
        tempFile.close()
        try:
            os.rename(filename + ".temp", filename)
        except:
            os.remove(filename)
            os.rename(filename + ".temp", filename)
          
        #update NETWORK NML-------------------------------------------------------------#
        filename=os.path.join(self.path2source, self.fname_netNML)
        tempFile=open(filename + ".temp","w")   #temporary file
        
        pattern1=r'(pulseGenerator id="pulseGen1" delay="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*ms" duration="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*ms" amplitude="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*nA")'
        pattern2=r'(pulseGenerator id="pulseGen2" delay="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*ms" duration="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*ms" amplitude="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*nA")'
        with open(filename) as file:
            lines = file.readlines()
            for line in lines:
                line=re.sub(pattern1,r'\g<1>%s\g<3>%s\g<5>%s\g<7>' %(I_inj_trans,I_inj_width,I_inj_max),line)
                line=re.sub(pattern2,r'\g<1>%s\g<3>%s\g<5>%s\g<7>' %(300,100,0.0),line)   #switching off second pulse
                tempFile.write(line)
        tempFile.close()
        try:
            os.rename(filename + ".temp", filename)
        except:
            os.remove(filename)
            os.rename(filename + ".temp", filename)
        
        #update LEMS--------------------------------------------------------------------#
        filename=os.path.join(self.path2source, self.fname_LEMS)
        tempFile=open(filename + ".temp","w")   #temporary file
        
        pattern1=r'(Simulation id="sim1" length="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*ms" step="[\s]*)([-+]?(?:\d*[.])?\d+)([\s]*ms" target="HHCellNetwork")'
        with open(filename) as file:
            lines = file.readlines()
            for line in lines:
                line=re.sub(pattern1,r'\g<1>%s\g<3>%s\g<5>' %(t_n,delta_t),line)
                tempFile.write(line)
        tempFile.close()
        try:
            os.rename(filename + ".temp", filename)
        except:
            os.remove(filename)
            os.rename(filename + ".temp", filename)  
        
    #function to plot data generated by NeuroML
    def plotData(self):

        #read data file and import columns as array using numpy
        data = np.loadtxt(self.fname_NML_output)
        t=data[:,0]*1000    #convert to ms
        V=data[:,1]*1000    #convert to mV
        m=data[:,2]
        h=data[:,3]
        n=data[:,4]
        ina=data[:,5]
        ik=data[:,6]
        il=data[:,7]
        i_inj1=data[:,8]*10**9 #convert to nA
        i_inj2=data[:,9]*10**9 #convert to nA

        #plt.rcParams['figure.figsize'] = [12, 8]
        #plt.rcParams['font.size'] = 15
        #plt.rcParams['legend.fontsize'] = 12
        #plt.rcParams['legend.loc'] = "upper right"

        #fig=plt.figure()
        plt.ioff()                 #suppress plot console window (plot only at display call)
        fig=plt.figure()
        fig.canvas.header_visible = False

        ax1 = plt.subplot(4,1,1)
        plt.xlim([np.min(t),np.max(t)])  #for all subplots
        plt.title('Hodgkin-Huxley Neuron')
        #i_inj_values = [self.I_inj(t) for t in t]
        plt.plot(t, i_inj1, 'k')
        plt.plot(t, i_inj2, 'b')
        plt.ylabel('$I_{inj}$ (nA)')      

        plt.subplot(4,1,2, sharex = ax1)
        plt.plot(t, ina, 'c', label='$I_{Na}$')
        plt.plot(t, ik, 'y', label='$I_{K}$')
        plt.plot(t, il, 'm', label='$I_{L}$')
        plt.ylabel('Current')
        plt.legend(loc = "upper right")

        plt.subplot(4,1,3, sharex = ax1)
        plt.plot(t, m, 'r', label='m')
        plt.plot(t, h, 'g', label='h')
        plt.plot(t, n, 'b', label='n')
        plt.ylabel('Gating Value')
        plt.legend(loc = "upper right")

        plt.subplot(4,1,4, sharex = ax1)
        plt.plot(t, V, 'k')
        plt.ylabel('V (mV)')
        plt.xlabel('t (ms)')
        #plt.ylim(-1, 40)

        plt.tight_layout()
        plt.show()
#end of class